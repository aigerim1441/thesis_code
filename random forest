# Install required libraries
!pip install shap scikit-learn pandas matplotlib seaborn --quiet

# Imports
import pandas as pd
import numpy as np
import shap
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay

# Upload dataset
from google.colab import files
uploaded = files.upload()  

file_name = 'clean_procurement_dataset.csv'
df = pd.read_csv(file_name)

# Split features and target
y = df['overpaid']
X = df.drop(columns=['overpaid'])

# Identify numeric and categorical columns
numeric_cols = X.select_dtypes(include=['int64', 'float64']).columns.tolist()
categorical_cols = list(set(X.columns) - set(numeric_cols))

# Define preprocessing + model pipeline
preprocessor = ColumnTransformer(transformers=[
    ('num', SimpleImputer(strategy='median'), numeric_cols),
    ('cat', SimpleImputer(strategy='most_frequent'), categorical_cols)
])

pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('model', RandomForestClassifier(n_estimators=100, random_state=42))
])

# Train/test split and model training
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
pipeline.fit(X_train, y_train)

# Evaluation metrics
print("\n=== Classification Report ===")
y_pred = pipeline.predict(X_test)
print(classification_report(y_test, y_pred))

ConfusionMatrixDisplay.from_estimator(pipeline, X_test, y_test)
plt.title("Confusion Matrix")
plt.show()
